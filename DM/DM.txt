DM (also possibly called Directed Multigraph or Untitled) is an esoteric programming language. 

As the name suggests, DM is uses a Directed Multgraph as a model of computation. We begin with a graph, with edges marked with 0 or 1.

We proceed as follows:

1. For each vertex, we consider the edges which lead to it, and count the number which have the value 1. If this number is 1, then the new value of the vertex is 1. Otherwise it's Zero.
2. For each edge, copy the value of the incoming vertex to the edge. 

We repeat this process until the program is instructed to terminate. 

Run Parameters
The first line of the program is made of four numbers, these are: 

OutputVertexNumber : The number of the vertex which will be used to output values
CyclesPerBit : How many cycles represent a bit
BitsPerByte : How many bits in a byte
Cyles : How many cycles before terminating the program

Syntax
First Line: 
  OutputVertex CyclesPerBit BitsPerByte Cyles 
Following Lines: 
  InVertex OutVertex State

Example Programs

1. Print 42

8 1 8 8 
0 1 0
1 2 0
2 3 1
3 4 0
4 5 1
5 6 0 
6 7 1
7 8 0 


DM Builder
As well as an interpreter, the standard library includes a builder which allows us to build a DM program in a more 
object-orienter fashion. Together, the API for DM looks like this: 

reset() : reset the builder/interpreter
parse(str) : reads a program from a string
run() : runs the program that was read, or constructed. 
generate() : generates a string representation of the program (code may not be identical to what was parsed)
edge(state) : creates an edge, and returns a reference to it
join(vertex1, vertex2) : joins two vertices Together
... other hi-level functions tbd ...



